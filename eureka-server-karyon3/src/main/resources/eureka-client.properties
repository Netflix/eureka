##Eureka Client configuration for Eureka Service

# Properties based configuration for eureka client that is part of the eureka server.
# Similar eureka-client.properties configs can be used for the entire eureka ecosystem (i.e. for both the
# eureka servers as well as registering webapps), with minimal changes to application specific properties
# (see below for these).
#
# The properties specified here is mostly what the users need to change.
# All of these can be specified as a java system property with -D option (eg)-Deureka.region=us-east-1


## -----------------------------------------------------
## The below properties are application specific.
## Each new application should set these as appropriate.
## -----------------------------------------------------

# Region where the application is deployed.
# - for AWS specify one of the AWS regions
# - for other datacenters specify a arbitrary string indicating the region.
#   This is normally specified as a -D option (eg) -Deureka.region=us-east-1
eureka.region=default

# Name of the application to be identified by other services (in this case, it is the eureka service itself)
eureka.name=eureka

# Virtual host name by which the clients identifies this service (in this case, it is the eureka service itself)
eureka.vipAddress=eureka.mydomain.net

# The port where the service will be identified and will be serving requests
eureka.port=8080

# Set to false as this config is for the eureka client in the eureka server itself.
# The eureka clients running in eureka server needs to connect to servers in other zones.
#
# For other applications this should not be set (default to true) for better zone based load balancing.
eureka.preferSameZone=false

## ------------------------------------------------------------------------------
## The below properties govern how clients should connect to eureka servers.
## In general these can be the same for all clients in the same eureka ecosystem.
## ------------------------------------------------------------------------------

# Change this if you want to use a DNS based lookup for determining other eureka servers (see example below)
eureka.shouldUseDns=false

# Since shouldUseDns is false, we use the following properties to explicitly specify the route to the eureka servers
eureka.serviceUrl.default=http://localhost:8080/eureka/v2/

# for the eureka server's own client config, set on-demand update to false as it may be too quick for the REST
# resource initialization
eureka.shouldOnDemandUpdateStatusChange=false

# the default eureka server application context is /eureka/v2 if deployed with eureka.war
# Set this property for custom application context.
#eureka.eurekaServer.context=eureka/v2

eureka.datacenter=

eureka.validateInstanceId=false

## -----------------------
## AWS deployment examples
##------------------------

# for AWS deployments, availability zones can be specified to take advantage of eureka client zone affinity by
# specifying the following configurations.
# for example, if the deployment is in us-east-1 and the available zones are us-east-1a, us-east-1b and us-east-1c,

# define the region
#eureka.region=us-east-1

# notice that the region is specified as part of the config name
#eureka.us-east-1.availabilityZones=us-east-1a,us-east-1b,us-east-1c

# "eurekaServerPort" is whatever port your eureka servers are configured with
#eureka.serviceUrl.us-east-1a=http://eurekaServerHostName:eurekaServerPort/eureka/v2
#eureka.serviceUrl.us-east-1b=http://eurekaServerHostName:eurekaServerPort/eureka/v2
#eureka.serviceUrl.us-east-1c=http://eurekaServerHostName:eurekaServerPort/eureka/v2

# If shouldUseDns is set to true, the below is an example of how to configure eureka client to route to eureka servers,
# assuming for example your DNS records are setup thus:
# txt record: txt.mycompany.eureka.mydomain.com => "server1address" "server2address" "server3address"
#eureka.shouldUseDns=true
#eureka.eurekaServer.domainName=mydomain.com
